is.null(NULL)
confounderbias <- function(bxy, bcx, bcy, varc, varx, rho = NULL, vary = NULL) {
if (is.null(rho) == FALSE) {
bxy + (bcx * bcy * varc) / (bcx^2 * varc + varx)
} else {
bxy + (rho * sqrt(vary)) / sqrt(varx)
}
xvar = seq(-.9, .9, by = 0.01)
bias = confounderbias(bxy = xvar, bcx = 1, bcy = 1, varc = 1, varx = 1)
dat <- data.frame(xvar, bias)
ggplot(dat, aes(x = xvar, y = bias)) + geom_line()
library(DiagrammeR)
library(tidyverse)
library(plotly)
library(DiagrammeR)
library(tidyverse)
library(plotly)
confounderbias <- function(bxy, bcx, bcy, varc, varx, rho = NULL, vary = NULL) {
if (is.null(rho) == FALSE) {
bxy + (bcx * bcy * varc) / (bcx^2 * varc + varx)
} else {
bxy + (rho * sqrt(vary)) / sqrt(varx)
}
xvar = seq(-.9, .9, by = 0.01)
bias = confounderbias(bxy = xvar, bcx = 1, bcy = 1, varc = 1, varx = 1)
dat <- data.frame(xvar, bias)
ggplot(dat, aes(x = xvar, y = bias)) + geom_line()
confounderbias <- function(bxy, bcx, bcy, varc, varx, rho = NULL, vary = NULL) {
if (is.null(rho)) {
bxy + (bcx * bcy * varc) / (bcx^2 * varc + varx)
} else {
bxy + (rho * sqrt(vary)) / sqrt(varx)
}
xvar = seq(-.9, .9, by = 0.01)
bias = confounderbias(bxy = xvar, bcx = 1, bcy = 1, varc = 1, varx = 1)
dat <- data.frame(xvar, bias)
ggplot(dat, aes(x = xvar, y = bias)) + geom_line()
install.packages("flexdashboard")
?DiagrammeR::renderDiagrammeR
confounderbias <- function(bxy, bcx, bcy, varc, varx, rho = NULL, vary = NULL) {
if (is.null(rho)) {
bxy + (bcx * bcy * varc) / (bcx^2 * varc + varx)
} else {
bxy + (rho * sqrt(vary)) / sqrt(varx)
}
expr <- "digraph dag {
graph [rankdir=TB, layout=neato]
node [shape=box, height=0.35, width=0.3]
X [pos='0,0!']
Y [pos='2,0!']
node [shape=circle, height=0.4, fixedsize=true]
Ex [label='&epsilon;@_{X}', pos='0,1!']
Ey [label='&epsilon;@_{Y}', pos='2,1!']
X -> Y [label='&beta;@_{xy}']
Ex -> X [label='1']
Ey -> Y [label='1']
Ex -> Ey [dir='both', headport='w', tailport='e', label='&rho;']
}"
shinyApp(
ui = fluidPage(
DiagrammeROutput("confdiagram"),
sliderInput(
"bxy",
label = h3("B_XY range"),
min = -5,
max = 5,
value = c(-1, 1)
),
numericInput("bcx", "bcx", value = 1),
numericInput("bcy", "bcy", value = 1),
numericInput("varc", "varc", value = 1),
numericInput("varx", "varx", value = 1),
plotlyOutput("plot1")
),
server = function(input, output) {
output$confdiagram <- renderDiagrammeR(expr, quoted = TRUE)
dat <- reactive({
xvar = seq(input$bxy[1], input$bxy[2], by = 0.01)
nrow = length(xvar)
bias = numeric(nrow)
for (i in 1:nrow) {
bias[i] <- confounderbias(
bxy = xvar[i],
bcx = input$bcx,
bcy = input$bcy,
varc = input$varc,
varx = input$varx
)
}
data.frame(xvar, bias)
})
output$plot1 <- renderPlotly({
p <- ggplot(dat(), aes(x = xvar, y = bias)) + geom_line()
ggplotly(p)
})
},
options = list(height = 1000)
)
?grVizOutput
?expression
?shiny::fluidRow
?shiny::helpText
?plotly::plot_ly
?selectInput
?shiny::selectInput
citation("dagitty")
citation("lavaan")
